<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qunau.NetFrameWork.Common</name>
    </assembly>
    <members>
        <member name="T:Qunau.NetFrameWork.Common.Code.Paging">
            <summary>
            分页类
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.Paging.pageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.PageSize">
            <summary>
            页大小(默认10页)
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.RowsCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.Paging.pageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.Paging.getRowsCount">
            <summary>
            是否获取总条数
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.GetRowsCount">
            <summary>
            是否获取总条数
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Paging.StratRows">
            <summary>
            开始索引
            </summary>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Code.QueueBase">
            <summary>
            队列轮循
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.QueueBase.timer">
            <summary>
            时间控件
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Code.QueueBase"/> class.
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.QueueBase.Interval">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.ThreadProc">
            <summary>
            轮循的线程函数
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.GetProgramName">
            <summary>
            获取程序名称
            </summary>
            <returns>默认为空</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.Start">
            <summary>
            开始函数
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.Stop">
            <summary>
            停止函数
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.QueueBase.timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            timer执行事件
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Code.Range`1">
            <summary>
            区间
            </summary>
            <typeparam name="T">区间类型</typeparam>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.Range`1.lower">
            <summary>
            The _lower.
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Code.Range`1.upper">
            <summary>
            The _upper.
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Code.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Code.Range`1"/> struct.
            </summary>
            <param name="lower">
            The lower.
            </param>
            <param name="upper">
            The upper.
            </param>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Range`1.Lower">
            <summary>
            下限(时间开始)
            </summary>
        </member>
        <member name="P:Qunau.NetFrameWork.Common.Code.Range`1.Upper">
            <summary>
            上限(时间结束)
            </summary>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Exception.CustomException">
            <summary>
            自定义异常
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Exception.CustomException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Exception.CustomException"/> class.
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Exception.CustomException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Exception.CustomException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Exception.CustomException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Exception.CustomException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="inner">
            The inner.
            </param>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.ConvertExtension">
            <summary>
            类型转化扩展
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.ConvertExtension.ConvertHelper(System.Object,System.Type)">
            <summary>
            The convert helper.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="conversionType">
            The conversion type.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.ConvertExtension.ConvertToDecimalNull(System.Object)">
            <summary>
            The convert to decimal null.
            </summary>
            <param name="targetObj">
            The target obj.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.ConvertExtension.ConvertToIntNull(System.Object)">
            <summary>
            The convert to int null.
            </summary>
            <param name="targetObj">
            The target obj.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.ConvertExtension.ConvertToString(System.Object)">
            <summary>
            The convert to string.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.ConvertExtension.ListToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将泛类型集合List类转换成DataTable
            </summary>
            <param name="entitys">泛类型集合</param>
            <typeparam name="T">T</typeparam>
            <returns>DataTable</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.DataExtension">
            <summary>
            数据扩展
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToList``1(System.Data.IDataReader)">
            <summary>
            ToList
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="reader">reader</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToList``1(System.Data.DataTable)">
            <summary>
            ToList
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="dt">dt</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToList``1(System.Data.DataSet)">
            <summary>
            ToList
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="ds">ds</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToList``1(System.Data.DataSet,System.Int32)">
            <summary>
            ToList
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="ds">ds</param>
            <param name="dataTableIndex">dataTableIndex</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToModel``1(System.Data.IDataReader)">
            <summary>
            ToModel
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="reader">reader</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToModel``1(System.Data.DataTable)">
            <summary>
            ToModel
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="dt">dt</param>
            <returns>T</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DataExtension.ToModel``1(System.Data.DataSet,System.Int32)">
            <summary>
            ToModel
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="ds">ds</param>
            <param name="dataTableIndex">dataTableIndex</param>
            <returns>T</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.DecimalExtension">
            <summary>
            Decimal扩展
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DecimalExtension.DecimalLeftLength(System.Decimal)">
            <summary>
            获取decimal类型小数点后面位数
            </summary>
            <param name="value">value</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.DecimalExtension.ConvertPoints(System.Decimal)">
            <summary>
            元转换为分
            </summary>
            <param name="price">元</param>
            <returns>分</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.EnumExtension">
            <summary>
            Enum扩展
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.EnumExtension.GetDescription(System.Enum)">
            <summary>
            获取枚举描述
            </summary>
            <param name="value">value</param>
            <returns>Description</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension">
            <summary>
            Linq扩展
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            根据字符串拆分数组
            </summary>
            <param name="source">
            要拆分的数组
            </param>
            <param name="separator">
            拆分符
            </param>
            <returns>
            字符串
            </returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            根据字符串拆分数组
            </summary>
            <typeparam name="TSource">类型</typeparam>
            <param name="soucre"> 要拆分的数组</param>
            <param name="separator">拆分符</param>
            <param name="map">拆分条件</param>
            <returns>字符串 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.KeyValuePair{System.Boolean,System.Func{``0,System.Object}}[])">
            <summary>
            多条件排序扩展方法
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="sources">sources</param>
            <param name="keySelector">keySelector</param>
            <returns>排序结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            升序
            </summary>
            <typeparam name="TSource">数据源类型</typeparam>
            <typeparam name="TKey">排序字段类型</typeparam>
            <param name="sources">数据</param>
            <param name="predicate">条件</param>
            <param name="keySelector">排序条件</param>
            <returns>最终数据</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            降序
            </summary>
            <typeparam name="TSource">数据源类型</typeparam>
            <typeparam name="TKey">排序字段类型</typeparam>
            <param name="sources">数据</param>
            <param name="predicate">条件</param>
            <param name="keySelector">排序条件</param>
            <returns>最终数据</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            扩展Linq的OrderBy方法，实现根据属性和顺序(倒序)进行排序，调用和linq的方法一致
            </summary>
            <typeparam name="TEntity">需要排序的实体对象</typeparam>
            <param name="source">结果集信息</param>
            <param name="propertyStr">动态排序的属性名(从前台获取)</param>
            <param name="isDesc">排序方式，不传递表示顺序，默认true，false表示倒序</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
             获取最大值的当前对象
            </summary>
            <typeparam name="TElement">TElement</typeparam>
            <typeparam name="TData">TData</typeparam>
            <param name="source">source</param>
            <param name="selector">selector</param>
            <returns>MaxValue</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
             获取最小值的当前对象
            </summary>
            <typeparam name="TElement">TElement</typeparam>
            <typeparam name="TData">TData</typeparam>
            <param name="source">source</param>
            <param name="selector">selector</param>
            <returns>MaxValue</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Decimal})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Double})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int64})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Single})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            求最大值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最大值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Decimal})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Double})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int64})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Single})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            求最小值
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>最小值</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Decimal})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Double})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int64})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Single})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            求和
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <param name="selector">selector</param>
            <returns>和</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            是否存在重复
            </summary>
            <typeparam name="TSource">TSource</typeparam>
            <param name="source">source</param>
            <param name="predicate">predicate</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Repeat``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据某个字段获取重复数据
            </summary>
            <typeparam name="TSource">数据类型</typeparam>
            <typeparam name="Tkey">字段类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">表达式</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.AllRepeat``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            所有的数据是否都是重复的
            </summary>
            <typeparam name="TSource">数据类型</typeparam>
            <typeparam name="Tkey">字段类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">表达式</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.Comparer``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            比较
            </summary>
            <typeparam name="TSource">数据源</typeparam>
            <param name="first">第一个</param>
            <param name="second">第二个</param>
            <param name="comparer">比较器</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.IEnumerableExtension.ComparableElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
             获取最大or最小值的当前对象
            </summary>
            <typeparam name="TElement">TElement</typeparam>
            <typeparam name="TData">TData</typeparam>
            <param name="source">source</param>
            <param name="selector">selector</param>
            <param name="isMax">最大还是最小</param>
            <returns>MaxValue</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.SerializerExtension">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.SerializerExtension.SerializeObject(System.Object)">
            <summary>
            JSON序列化
            </summary>
            <param name="obj">对象</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.SerializerExtension.DeserializeObject``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="json">JSON字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.SerializerExtension.DeserializeObject(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="json">JSON字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.SerializerExtension.DeepCopy``1(``0)">
            <summary>
            XML序列化方式深复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <returns>复制对象</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Extension.StringExtension">
            <summary>
            字符串扩展类
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.StringExtension.IsEmpty(System.String)">
            <summary>
            指示指定的字符串是 null 还是 System.String.Empty 字符串。
            </summary>
            <param name="value">要测试的字符串。</param>
            <returns>如果 value 参数为 null 或空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.StringExtension.IsEmptySpace(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value">要测试的字符串。</param>
            <returns> 如果 value 参数为 null 或 System.String.Empty，或者如果 value 仅由空白字符组成，则为 true。</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.StringExtension.IsSuccess(System.String)">
            <summary>
            验证指定字符串是否为success
            </summary>
            <param name="value">指定字符串</param>
            <returns><c>true</c>如果 value 参数为 success ，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.StringExtension.Split(System.String,System.String)">
            <summary>
            根据字符串拆分字符串
            </summary>
            <param name="source">要拆分的字符串</param>
            <param name="separator">拆分符</param>
            <returns>数组</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Extension.StringExtension.Split(System.String,System.String,System.String[])">
            <summary>
            采用递归将字符串分割成数组
            </summary>
            <param name="source">要拆分的字符串</param>
            <param name="separator">拆分符</param>
            <param name="attachArray">attachArray</param>
            <returns>string[]</returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Write.LogService">
            <summary>
            写入文本日志
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Write.LogService.obj">
            <summary>
            The obj.
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.WriteLog(System.Exception,System.String)">
            <summary>
            记录异常文本日志
            </summary>
            <param name="ex">异常</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.WriteLog(System.Exception,System.String,System.String)">
            <summary>
            记录异常文本日志
            </summary>
            <param name="ex">异常</param>
            <param name="path">日志路径</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.WriteLog(System.String,System.Exception,System.String,System.String)">
            <summary>
            记录异常文本日志
            </summary>
            <param name="describe">错误描述</param>
            <param name="ex">异常</param>
            <param name="path">日志路径</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.CreateErrorMessage(System.Exception,System.String)">
            <summary>
            创建异常消息
            </summary>
            <param name="ex">异常信息</param>
            <param name="remark">备注</param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.WriteLog(System.String)">
            <summary>
            记录文本日志
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.WriteLog(System.String,System.String)">
            <summary>
            记录文本日志
            </summary>
            <param name="content">日志内容</param>
            <param name="path">日志路径</param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.LogService.Log(System.String,System.String)">
            <summary>
            The log.
            </summary>
            <param name="content">
            The content.
            </param>
            <param name="path">
            The path.
            </param>
            <returns>
            The 
            </returns>
        </member>
        <member name="T:Qunau.NetFrameWork.Common.Write.TextWriter">
            <summary>
            写入文本
            </summary>
        </member>
        <member name="F:Qunau.NetFrameWork.Common.Write.TextWriter.fileName">
            <summary>
            写入文件路径
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Write.TextWriter"/> class.
            </summary>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Qunau.NetFrameWork.Common.Write.TextWriter"/> class.
            </summary>
            <param name="fileName">
            The file name.
            </param>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.WriteLog(System.String)">
            <summary>
            写入日志
            </summary>
            <param name="logInfo">内容 </param>
            <returns>结果</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.GetFileMainPath(System.DateTime)">
            <summary>
            获取文件路径
            </summary>
            <param name="timeStamp">timeStamp</param>
            <returns>path</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.GetLastAccessFile(System.String,System.DateTime)">
            <summary>
            获取最后写入日志的文件
            </summary>
            <param name="path">路径</param>
            <param name="timeStamp">timeStamp</param>
            <returns>FileInfo</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.GetFileStream(System.IO.FileInfo,System.String,System.DateTime)">
            <summary>
            获取文件流
            </summary>
            <param name="fileInfo">lastFile</param>
            <param name="path">path</param>
            <param name="timeStamp">timeStamp</param>
            <returns>FileStream</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.CreateFile(System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path">路径</param>
            <param name="fileName1">名称</param>
            <returns>FileStream</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.GetFileMainName(System.DateTime)">
            <summary>
            获取文件名称
            </summary>
            <param name="timeStamp">timeStamp</param>
            <returns>HHmmssfff</returns>
        </member>
        <member name="M:Qunau.NetFrameWork.Common.Write.TextWriter.IsOutOfTimeMaxLength(System.DateTime,System.DateTime)">
            <summary>
            IsOutOfTimeMaxLength
            </summary>
            <param name="creationTime">creationTime</param>
            <param name="timeStamp">timeStamp</param>
            <returns>bool</returns>
        </member>
    </members>
</doc>
